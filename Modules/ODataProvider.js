// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(["Ural/Modules/ODataFilter", "Ural/Modules/DataFilterOpts", "Ural/Libs/datajs"], function(fr, frOpts) {
    var ODataProvider;
    ODataProvider = (function() {

      function ODataProvider() {}

      ODataProvider.serviceHost = function() {
        return __g.serviceHost;
      };

      ODataProvider._parse = function(item, parent) {
        var arr, obj, prop;
        if (item === null || item === void 0 || item instanceof Date || typeof item !== "object") {
          return item;
        }
        if (item.results && Array.isArray(item.results)) {
          arr = item.results;
        }
        if (item.d && Array.isArray(item.d)) {
          arr = item.d;
        }
        if (Array.isArray(item)) {
          arr = item;
        }
        if (arr) {
          return arr.map(function(i) {
            return ODataProvider._parse(i, parent);
          });
        }
        obj = {};
        for (prop in item) {
          if (!__hasProp.call(item, prop)) continue;
          if (prop === "__deferred") {
            if (_.str.endsWith(parent, "s")) {
              return [];
            } else {
              return {
                id: __g.nullRefVal()
              };
            }
          }
          if (prop !== "__metadata") {
            obj[prop] = ODataProvider._parse(item[prop], prop);
          }
        }
        return obj;
      };

      ODataProvider._isDelete = function(item) {
        return item && item.__state && item.__state.__status === "removed";
      };

      ODataProvider._getEndPoint = function(name, item, isIndex) {
        var indexEndPoint, itemEndPoint, root;
        if (item.__endPointBinding === null) {
          return null;
        }
        if (item.__endPointBinding) {
          root = item.__endPointBinding["$root"];
          if (typeof item.__endPointBinding === "string") {
            root = item.__endPointBinding;
          }
        }
        if (root) {
          if (typeof root === "object") {
            indexEndPoint = root.index;
            itemEndPoint = root.item;
          } else {
            itemEndPoint = root;
          }
        } else {
          itemEndPoint = name.replace(/^(.*)s$/, "$1");
        }
        if (indexEndPoint == null) {
          indexEndPoint = itemEndPoint.pluralize();
        }
        if (isIndex) {
          return indexEndPoint;
        } else {
          return itemEndPoint;
        }
      };

      ODataProvider._isNew = function(item) {
        return item.id === null || item.id === -1;
      };

      ODataProvider._getKeyVal = function(id) {
        if (typeof id === "string") {
          return "'" + id + "'";
        } else {
          return id;
        }
      };

      ODataProvider.isChanged = function(state) {
        var p;
        for (p in state) {
          if (!__hasProp.call(state, p)) continue;
          if (state[p] === "modifyed" || state.__status === "added" || state.__status === "removed") {
            return true;
          }
        }
        return false;
      };

      ODataProvider._formatRequest = function(name, item, metadata, parentName, parent, parentContentId, totalCount) {
        var cid, cidOrig, data, epb, expnads, flattered, i, indexEP, isArrayProp, isDelete, itemEP, ix, key, nested, parIndexEP, parentId, parentKey, prop, ref, res, states, status, typeName, val, _i, _len;
        res = [];
        expnads = [];
        if (totalCount == null) {
          totalCount = 1;
        }
        cid = totalCount;
        cidOrig = cid;
        isDelete = ODataProvider._isDelete(item);
        if (parent) {
          parentId = parent.id;
        }
        key = ODataProvider._getKeyVal(item.id);
        parentKey = ODataProvider._getKeyVal(parentId);
        if (item.__state) {
          status = item.__state.__status;
        }
        if (!item.__state || ODataProvider.isChanged(item.__state)) {
          if (!isDelete) {
            flattered = {};
            for (prop in item) {
              if (!__hasProp.call(item, prop)) continue;
              val = item[prop];
              if (val !== null && (typeof val !== "object" || val instanceof Date) && !Array.isArray(val) && prop !== "__endPointBinding") {
                flattered[prop] = val;
              }
              if (val === null) {
                flattered[prop] = null;
              }
            }
          }
          isArrayProp = parent ? Array.isArray(parent[name]) : false;
          typeName = isArrayProp ? name.singularize() : name;
          itemEP = ODataProvider._getEndPoint(name, item, false);
          indexEP = ODataProvider._getEndPoint(name, item, true);
          if (!parentName) {
            if (isDelete) {
              data = {
                method: "DELETE",
                uri: "" + indexEP + "(" + key + ")"
              };
            } else {
              data = ODataProvider._isNew(item) ? {
                method: "POST",
                uri: indexEP
              } : {
                method: "PUT",
                uri: "" + indexEP + "(" + key + ")"
              };
            }
          } else {
            parentName = parentName.replace(/^(.*)s$/, "$1");
            parIndexEP = ODataProvider._getEndPoint(parentName, parent, true);
            if (isDelete) {
              ref = !isArrayProp ? name : "" + name + "(" + item.id + ")";
              data = {
                method: "DELETE",
                uri: "" + parIndexEP + "(" + parentId + ")/$links/" + ref
              };
            } else {
              if (item.id === __g.nullRefVal()) {
                return res;
              }
              ref = ODataProvider._isNew(parent) ? "$" + parentContentId : "" + parIndexEP + "(" + parentId + ")";
              if (!ODataProvider._isNew(item)) {
                /*here actual update of referenced item
                */

                res.push({
                  headers: {
                    "Content-ID": cid
                  },
                  requestUri: "" + indexEP + "(" + item.id + ")",
                  method: "PUT",
                  data: flattered
                });
                cid++;
                /*here update link to referenced item
                */

                data = {
                  method: (isArrayProp ? "POST" : "PUT"),
                  uri: "" + ref + "/$links/" + name
                };
                flattered = {
                  uri: "" + indexEP + "(" + item.id + ")"
                };
              } else {
                if (isArrayProp) {
                  data = {
                    method: "POST",
                    uri: "" + ref + "/" + name
                  };
                } else {
                  res.push({
                    headers: {
                      "Content-ID": cid
                    },
                    requestUri: indexEP,
                    method: "POST",
                    data: flattered
                  });
                  data = {
                    method: "PUT",
                    uri: "" + ref + "/$links/" + name
                  };
                  flattered = {
                    uri: "$" + cid
                  };
                  cid++;
                }
              }
            }
          }
          res.push({
            headers: {
              "Content-ID": cid
            },
            requestUri: data.uri,
            method: data.method,
            data: flattered
          });
          totalCount += res.length;
        }
        if (!isDelete) {
          for (prop in item) {
            if (!__hasProp.call(item, prop)) continue;
            if (prop === "__state" || prop === "__parent" || prop === "__endPointBinding") {
              continue;
            }
            val = item[prop];
            if (item.__endPointBinding) {
              epb = item.__endPointBinding[prop];
            }
            if (epb === null) {
              continue;
            }
            if (Array.isArray(val)) {
              if (item.__state) {
                states = item.__state[prop];
              }
              if (states) {
                val = val.concat(states.filter(function(v) {
                  return v.__status === "removed";
                }));
              }
              for (ix = _i = 0, _len = val.length; _i < _len; ix = ++_i) {
                i = val[ix];
                if (states) {
                  i.__state = states[ix];
                }
                if (epb) {
                  i.__endPointBinding = epb;
                }
                nested = ODataProvider._formatRequest(prop, i, metadata, name, item, cidOrig, totalCount);
                totalCount += nested.length;
                res = res.concat(nested);
              }
            } else if (val !== null && typeof val === "object" && !(val instanceof Date)) {
              if (item.__state) {
                val.__state = item.__state[prop];
              }
              if (epb) {
                val.__endPointBinding = epb;
              }
              nested = ODataProvider._formatRequest(prop, val, metadata, name, item, cidOrig, totalCount);
              totalCount += nested.length;
              res = res.concat(nested);
            }
          }
        }
        return res;
      };

      ODataProvider._unpackArray = function(ar) {
        var r, res, s, _i, _j, _len, _len1, _ref;
        if (Array.isArray(ar[0])) {
          res = [];
          for (_i = 0, _len = ar.length; _i < _len; _i++) {
            r = ar[_i];
            _ref = ODataProvider._unpackArray(r);
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              s = _ref[_j];
              res.push(s);
            }
          }
          return res;
        } else {
          return ar;
        }
      };

      ODataProvider.prototype.load = function(srcName, filter, callback) {
        var ofr, rid, stt;
        ofr = fr.convert(filter);
        stt = this._getSatementByODataFilter(srcName, ofr);
        if (ofr.$data) {
          rid = new Date().getTime();
        }
        return OData.read(stt, function(data) {
          console.log(data);
          return callback(null, ODataProvider._parse(data));
        });
      };

      ODataProvider.prototype._getExpand = function(srcName, expand) {
        var res;
        res = frOpts.expandOpts.get(srcName, expand);
        if (res === "") {
          null;
        }
        return res != null ? res : res = expand;
      };

      ODataProvider.prototype._getOrderBy = function(srcName, filter, orderby) {
        var singleItemFilter;
        if (filter) {
          singleItemFilter = filter.match(/^.*id eq .*$/);
        }
        if (singleItemFilter) {
          return null;
        }
        return orderby != null ? orderby : orderby = frOpts.orderBy.get(srcName);
      };

      ODataProvider.prototype._getSatementByODataFilter = function(srcName, oDataFilter) {
        var arg, expand, orderby, srch, _ref;
        expand = this._getExpand(srcName, oDataFilter.$expand);
        if (!oDataFilter.$isAction) {
          orderby = this._getOrderBy(srcName, oDataFilter.$filter, oDataFilter.$orderby);
          srcName = srcName.pluralize();
        }
        srch = _u.urlAddSearch("" + (ODataProvider.serviceHost()) + srcName, oDataFilter.$filter ? "$filter=" + oDataFilter.$filter : void 0, oDataFilter.$top ? "$top=" + oDataFilter.$top : void 0, oDataFilter.$skip ? "$skip=" + oDataFilter.$skip : void 0, expand ? "$expand=" + expand : void 0, orderby ? "$orderby=" + orderby : void 0);
        if (oDataFilter.$args) {
          _ref = oDataFilter.$args;
          for (arg in _ref) {
            if (!__hasProp.call(_ref, arg)) continue;
            srch = _u.urlAddSearch(srch, "" + arg + "=" + oDataFilter.$args[arg]);
          }
        }
        return srch;
      };

      ODataProvider._getMetadata = function(srcName, item) {
        return null;
      };

      ODataProvider._getSaveRequestData = function(srcName, item) {
        var parentId, parentTypeName, req;
        if (item.__parent) {
          parentId = item.__parent.id;
          parentTypeName = item.__parent.typeName;
        }
        req = ODataProvider._formatRequest(srcName, item, null, parentTypeName, parentId);
        if (req.length) {
          req.sort(function(a, b) {
            return a.headers["Content-ID"] - b.headers["Content-ID"];
          });
          return {
            __batchRequests: [
              {
                __changeRequests: req
              }
            ]
          };
        } else {
          return null;
        }
      };

      ODataProvider._getBodyError = function(body) {
        var $xml, xmlDoc;
        xmlDoc = $.parseXML(body);
        $xml = $(body);
        return $xml[1].children[1].textContent;
      };

      ODataProvider._parseSaveResponseData = function(data) {
        var batchResponse, changeResponse, res, _i, _j, _len, _len1, _ref, _ref1;
        res = [];
        _ref = data.__batchResponses;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          batchResponse = _ref[_i];
          _ref1 = batchResponse.__changeResponses;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            changeResponse = _ref1[_j];
            res.push({
              type: null,
              contentId: changeResponse.headers ? changeResponse.headers["Content-ID"] : void 0,
              data: changeResponse.data,
              error: changeResponse.message,
              bodyError: changeResponse.response && changeResponse.response.body ? ODataProvider._getBodyError(changeResponse.response.body) : null
            });
          }
        }
        return res;
      };

      ODataProvider.prototype.save = function(srcName, item, callback) {
        var data, request,
          _this = this;
        data = ODataProvider._getSaveRequestData(srcName, item);
        if (data) {
          request = {
            requestUri: "" + (ODataProvider.serviceHost()) + "$batch",
            method: "POST",
            data: data
          };
          return OData.request(request, function(data) {
            var errs, expand, id, resp, rootResp, status;
            resp = ODataProvider._parseSaveResponseData(data);
            errs = resp.filter(function(f) {
              return f.error;
            });
            if (item.__state) {
              status = item.__state.__status;
            }
            if (!errs.length && status !== "removed") {
              expand = _this._getExpand(srcName, "$item");
              rootResp = resp.filter(function(x) {
                return x.contentId === "1";
              })[0];
              if (status) {
                id = rootResp && rootResp.data && status === "added" ? rootResp.data.id : item.id;
              } else {
                id = !item.id || item.id === -1 ? rootResp.data.id : item.id;
              }
              return _this.load(srcName, {
                $filter: {
                  id: {
                    $eq: id
                  }
                },
                $expand: expand
              }, function(err, data) {
                if (!err) {
                  data = data[0];
                }
                return callback(err, data);
              });
            } else {
              return callback(errs.map(function(err) {
                if (err.bodyError) {
                  return err.bodyError;
                } else {
                  return err.error;
                }
              }).join('\n'));
            }
          }, function(err) {
            return callback(err);
          }, OData.batchHandler);
        } else {
          return callback(__g.i18n.messages.nothing_to_commit);
        }
      };

      ODataProvider.prototype["delete"] = function(srcName, id, callback) {
        return this.save(srcName, {
          id: id,
          __state: {
            __status: "removed"
          }
        }, callback);
      };

      return ODataProvider;

    })();
    return {
      dataProvider: new ODataProvider()
    };
  });

}).call(this);
