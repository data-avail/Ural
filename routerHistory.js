// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["Ural/Controllers/controllerBase", "Ural/Modules/pubSub", "crossroads", "hasher"], function(controllerBase, pubSub, crossroads, hasher) {
    var RouterBase;
    RouterBase = (function() {

      function RouterBase(controllerDirectory, defaultRoute) {
        var _this = this;
        this.controllerDirectory = controllerDirectory;
        this.defaultRoute = defaultRoute;
        this.parseHash = __bind(this.parseHash, this);

        this._recAction = {
          name: null,
          obj: null,
          action: null
        };
        this._recHash = null;
        this.addRoute('{controller}/index', true, function(ctr, ck) {
          return _this.onControllerRouter(ctr, "index", null, ck);
        });
        this.addRoute('{controller}/item/{idx}', true, function(ctr, idx, ck) {
          return _this.onControllerRouter(ctr, "item", idx, null, ck);
        });
        this.addRoute('{controller}', true, function(ctr, ck) {
          return _this.onControllerRouter(ctr, null, null, ck);
        });
        pubSub.sub("href", "change", function(data) {
          return _this._hash(data.href);
        });
      }

      RouterBase.prototype._exec = function(execArgs) {
        var args;
        args = execArgs.split("!").map(function(m) {
          return m.split("/").filter(function(f) {
            return f;
          });
        });
        return pubSub.pub("router", "exec", {
          args: args
        });
      };

      RouterBase.prototype._hash = function(val, silent) {
        var hash;
        if (val === void 0) {
          hash = window.history.state;
          if (hash) {
            return hash.replace(/^([^!]+)\/!\/(.*)/, "$1");
          } else {
            return null;
          }
        } else {
          val = val.replace(/^(\/)/, "");
          hash = "/" + val;
          if (!silent) {
            window.history.pushState(val, val, hash);
            return crossroads.parse(val);
          } else {
            return window.history.replaceState(val, val, hash);
          }
        }
      };

      RouterBase.prototype.removeRoute = function(route) {
        return crossroads.removeRoute(route);
      };

      RouterBase.prototype.addRoute = function(route, appendExecRoute, callback) {
        return crossroads.addRoute(route, callback);
        /*
              if appendExecRoute
                execRoute = "#{route}/!/{exec*}"
                crossroads.addRoute execRoute, =>
                  args = _u.argsToArray arguments
                  exec = args[args.length - 1]
                  hash = @_hash()
                  @_hash hash, true
                  if @_recHash != hash
                    args.splice args.length - 1, 1, => @_exec exec
                    callback.apply @, args
                  else
                    @_exec exec
        */

      };

      RouterBase.prototype.onNotFound = function() {
        return this.onRouteChanged(null, null);
      };

      RouterBase.prototype.onControllerRouter = function(controller, action, index, callback, persistRoute) {
        var capControllerName, controllerName,
          _this = this;
        this._recHash = this._hash();
        if (this._recAction.obj && this._recAction.obj.afterAction) {
          this._recAction.obj.afterAction(this._recAction.action);
        }
        index = this.onParseIndex(controller, action, index);
        if (this._recAction.name !== controller) {
          if (action == null) {
            action = "index";
          }
          controllerName = "" + controller + "Controller";
          capControllerName = "" + (_.str.capitalize(controller)) + "Controller";
          return require(["" + this.controllerDirectory + "/" + controllerName], function(controllerModule) {
            var ctl;
            ctl = eval("new controllerModule." + capControllerName + "()");
            ctl[action](index);
            _this._recAction = {
              name: controller,
              obj: ctl,
              action: action
            };
            if (callback) {
              callback();
            }
            if (!persistRoute) {
              return _this.onRouteChanged(controller, action);
            }
          });
        } else {
          this._recAction.action = action;
          this._recAction.obj[action](index);
          if (!persistRoute) {
            return this.onRouteChanged(controller, action);
          }
        }
      };

      RouterBase.prototype.onRouteChanged = function(controller, action) {
        if (this.onRouteChangedCallback) {
          return this.onRouteChangedCallback(controller, action);
        }
      };

      RouterBase.prototype.startRouting = function() {
        var hash,
          _this = this;
        window.onpopstate = function(e) {
          return crossroads.parse(e.state);
        };
        crossroads.bypassed.add(function(request) {
          return _this.onNotFound();
        });
        hasher.changed.add(this.parseHash);
        hasher.init();
        hash = window.location.pathname.replace(/^(\/)/, "");
        if (!hash) {
          hash = this.defaultRoute;
        }
        if (hash) {
          return this._hash(hash);
        }
      };

      RouterBase.prototype.onParseIndex = function(controller, action, index) {
        return index;
      };

      RouterBase.prototype.parseHash = function(newHash, oldHash) {
        this._exec(newHash);
        return hasher.replaceHash(null);
      };

      return RouterBase;

    })();
    return {
      RouterBase: RouterBase
    };
  });

}).call(this);
