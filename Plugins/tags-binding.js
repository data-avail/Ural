// Generated by CoffeeScript 1.3.3
(function() {

  define(["Ural/Plugins/baio.tag-widget"], function() {
    var ini;
    ini = function(_opts) {
      var _format, _lock;
      _format = function(valueAccessor) {
        var values;
        values = ko.utils.unwrapObservable(valueAccessor());
        if (values) {
          return values.map(function(v) {
            return _opts._format(v);
          });
        } else {
          return [];
        }
      };
      _lock = false;
      return ko.bindingHandlers.tags = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var link, linkType, opts, tagsOpts;
          tagsOpts = allBindingsAccessor().tagsOpts;
          if (tagsOpts) {
            link = tagsOpts.link;
          }
          if (tagsOpts) {
            linkType = tagsOpts.linkType;
          }
          opts = $.extend(true, {}, _opts);
          if (link) {
            opts.link = link;
          }
          if (ko.utils.unwrapObservable(valueAccessor())) {
            opts.onTagAdded = function(tag, userInput) {
              if (userInput) {
                _lock = true;
                valueAccessor().push(opts._parse(tag));
                return _lock = false;
              }
            };
            opts.onTagRemoved = function(tag, userInput) {
              var index, t, _i, _len, _ref;
              if (userInput) {
                _lock = true;
                _ref = _format(valueAccessor);
                for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                  t = _ref[index];
                  if (t.value === tag.value) {
                    break;
                  }
                }
                t = ko.utils.unwrapObservable(valueAccessor())[index];
                valueAccessor().remove(t);
                return _lock = false;
              }
            };
          }
          return $(element).tag(opts);
        },
        update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var names, vals;
          names = $(element).tag("assignedTags");
          vals = _format(valueAccessor);
          if (!_lock) {
            return $(element).tag("add", vals);
          }
        }
      };
    };
    return {
      ini: ini
    };
  });

}).call(this);
