// Generated by CoffeeScript 1.3.3
(function() {

  define(["Ural/Libs/tag-it"], function() {
    return $.widget("baio.tag", {
      options: {
        tagSource: null,
        link: "Tag",
        onTagAdded: null,
        onTagRemoved: null
      },
      _create: function() {
        var css, opts,
          _this = this;
        this.tags = [];
        this.lastRespTags = [];
        opts = {
          animate: false,
          allowSpaces: true,
          tagSource: function(req, resp) {
            req.link = _this.options.link;
            return _this.options.tagSource(req, function(respTags) {
              _this.lastRespTags = respTags ? respTags : [];
              return resp(respTags);
            });
          },
          onTagAdded: function(e, tag) {
            var t, tagLabel;
            t = _this.__tagToBe;
            if (!t) {
              tagLabel = $(e.target).tagit("tagLabel", tag);
              t = _this.lastRespTags.filter(function(f) {
                return f.value === tagLabel;
              })[0];
              if (t == null) {
                t = {
                  key: -1,
                  value: tagLabel,
                  label: tagLabel
                };
              }
            }
            _this.tags.push(t);
            if (_this.options.onTagAdded) {
              return _this.options.onTagAdded(t, _this.__tagToBe ? false : true);
            }
          },
          onTagRemoved: function(e, tag) {
            var t, tagLabel;
            tagLabel = $(e.target).tagit("tagLabel", tag);
            t = _this.tags.filter(function(i) {
              return i.value === tagLabel;
            })[0];
            _this.tags.splice(_this.tags.indexOf(t), 1);
            if (_this.options.onTagRemoved) {
              return _this.options.onTagRemoved(t, _this.__tagToBe ? false : true);
            }
          }
        };
        css = $(this.element[0]).attr("class");
        $(this.element[0]).tagit(opts);
        return $(this.element[0]).next().addClass(css);
      },
      add: function(tags) {
        var tag, _i, _len, _results;
        this.__tagToBe = true;
        $(this.element[0]).tagit("removeAll");
        this.__tagToBe = null;
        _results = [];
        for (_i = 0, _len = tags.length; _i < _len; _i++) {
          tag = tags[_i];
          this.__tagToBe = tag;
          $(this.element[0]).tagit("createTag", tag.value);
          _results.push(this.__tagToBe = null);
        }
        return _results;
      },
      remove: function(tags) {
        var tag, _i, _len, _results;
        this.__tagToBe = true;
        $(this.element[0]).tagit("removeAll");
        this.__tagToBe = null;
        _results = [];
        for (_i = 0, _len = tags.length; _i < _len; _i++) {
          tag = tags[_i];
          this.__tagToBe = tag;
          $(this.element[0]).tagit("removeTag", tag, false);
          _results.push(this.__tagToBe = null);
        }
        return _results;
      },
      assignedTags: function() {
        return $(this.element[0]).tagit("assignedTags");
      }
    });
  });

}).call(this);
