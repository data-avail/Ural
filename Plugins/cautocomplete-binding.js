// Generated by CoffeeScript 1.3.3
(function() {

  define(function() {
    var ini;
    ini = function(opts) {
      var _setNullRef;
      ko.bindingHandlers.cautocomplete = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var autocompleteOpts, bindingOpts, filterField, keyField, labelField, lastLabel, modelModule, valField,
            _this = this;
          bindingOpts = allBindingsAccessor().cautocompleteOpts;
          keyField = bindingOpts.keyField;
          valField = bindingOpts.valField;
          if (valField == null) {
            valField = keyField;
          }
          labelField = bindingOpts.labelField;
          if (labelField == null) {
            labelField = valField;
          }
          modelModule = require(bindingOpts.typePath);
          lastLabel = null;
          filterField = bindingOpts.filterField;
          if (filterField == null) {
            filterField = "lastName";
          }
          autocompleteOpts = {
            source: function(req, resp) {
              var r;
              req.link = bindingOpts.link;
              req.filter = {
                $filter: {}
              };
              req.filter.$filter[filterField] = {
                $like: req.term
              };
              r = function(data) {
                return resp(data.map(function(d) {
                  var item;
                  item = new modelModule.ModelConstructor();
                  ko.mapping.fromJS(d, modelModule.metadata.mapping, item);
                  return {
                    key: item[keyField](),
                    value: item[valField](),
                    label: item[labelField](),
                    data: item
                  };
                }));
              };
              return opts.source(req, r);
            },
            select: function(event, ui) {
              var item;
              item = valueAccessor();
              item(ui.item.data);
              return lastLabel = ui.item.value;
            },
            change: function(event, ui) {
              if (lastLabel !== $(element).val()) {
                return _setNullRef(modelModule, valueAccessor());
              }
            }
          };
          return $(element).autocomplete(autocompleteOpts);
        },
        update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var bindingOpts, item, keyField, valField;
          bindingOpts = allBindingsAccessor().cautocompleteOpts;
          keyField = bindingOpts.keyField;
          valField = bindingOpts.valField;
          if (valField == null) {
            valField = keyField;
          }
          item = valueAccessor();
          if (item() && $(element).val() !== item()[valField]()) {
            return $(element).val(item()[valField]());
          } else if (!item()) {
            return $(element).val(null);
          }
        }
      };
      return _setNullRef = function(modelModule, item) {
        var emptyItem;
        emptyItem = new modelModule.ModelConstructor();
        emptyItem.id(__g.nullRefVal());
        return item(emptyItem);
      };
    };
    return {
      ini: ini
    };
  });

}).call(this);
