// Generated by CoffeeScript 1.3.3
(function() {

  define(function() {
    var ini;
    ini = function(opts) {
      var _ref, _ref1, _setDate, _setDateDuration;
      if (!opts) {
        opts = {};
      }
      if ((_ref = opts.format) == null) {
        opts.format = "DD MMMM YYYY";
      }
      if ((_ref1 = opts.formatDateTime) == null) {
        opts.formatDateTime = "DD MMMM YYYY HH:mm";
      }
      _setDateDuration = function(element, date) {
        return $(element).text(date ? moment(date).fromNow() : "");
      };
      _setDate = function(element, date, format) {
        return $(element).text(date ? moment(date).format(format) : "");
      };
      ko.bindingHandlers.durdate = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var format, option, valAccessor;
          option = allBindingsAccessor().ddateOpts;
          if (option) {
            format = option.format;
          }
          if (format == null) {
            format = opts.format;
          }
          valAccessor = valueAccessor();
          _setDateDuration(element, ko.utils.unwrapObservable(valAccessor));
          if (valAccessor.subscribe) {
            return valAccessor.subscribe(function(newValue) {
              return _setDateDuration(element, newValue);
            });
          }
        }
      };
      ko.bindingHandlers.tdate = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var format, option, valAccessor;
          option = allBindingsAccessor().ddateOpts;
          if (option) {
            format = option.format;
          }
          if (format == null) {
            format = opts.formatDateTime;
          }
          valAccessor = valueAccessor();
          _setDate(element, ko.utils.unwrapObservable(valAccessor), format);
          return valAccessor.subscribe(function(newValue) {
            return _setDate(element, newValue, format);
          });
        }
      };
      return ko.bindingHandlers.ddate = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var format, option, valAccessor;
          option = allBindingsAccessor().ddateOpts;
          if (option) {
            format = option.format;
          }
          if (format == null) {
            format = opts.format;
          }
          valAccessor = valueAccessor();
          _setDate(element, ko.utils.unwrapObservable(valAccessor), format);
          return valAccessor.subscribe(function(newValue) {
            return _setDate(element, newValue, format);
          });
        }
      };
    };
    ko.bindingHandlers.date = {
      init: function(element, valueAccessor, allBindingsAccessor) {
        var css, dmaxRule, dminRule, maxDate, minDate;
        css = $(element).attr("class");
        dminRule = valueAccessor().extend().rules().filter(function(f) {
          return f.rule === "dmin";
        })[0];
        if (dminRule) {
          minDate = moment(dminRule.params).toDate();
        }
        dmaxRule = valueAccessor().extend().rules().filter(function(f) {
          return f.rule === "dmax";
        })[0];
        if (dmaxRule) {
          maxDate = moment(dmaxRule.params).toDate();
        }
        $(element).datepicker({
          minDate: minDate,
          maxDate: maxDate
        });
        $(element).addClass(css);
        ko.utils.registerEventHandler(element, "change", function() {
          var d, date, observable;
          observable = valueAccessor();
          date = $(element).datepicker("getDate");
          d = moment(date).add("h", -1 * date.getTimezoneOffset() / 60);
          return observable(d.toDate());
        });
        return ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
          return $(element).datepicker("destroy");
        });
      },
      update: function(element, valueAccessor) {
        var value;
        value = ko.utils.unwrapObservable(valueAccessor());
        $(element).datepicker("setDate", value);
        return valueAccessor()($(element).datepicker("getDate"));
      }
    };
    return {
      ini: ini
    };
  });

}).call(this);
