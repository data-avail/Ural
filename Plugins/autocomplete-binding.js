// Generated by CoffeeScript 1.3.3
(function() {

  define(function() {
    var ini;
    ini = function(opts) {
      return ko.bindingHandlers.autocomplete = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var autocompleteOpts, bindingOpts, lastLabel;
          bindingOpts = allBindingsAccessor().autocompleteOpts;
          lastLabel = "";
          autocompleteOpts = {
            source: function(req, resp) {
              var selectionStart;
              req.link = bindingOpts.link;
              selectionStart = $(element).context.selectionStart;
              $(element).val($(element).context.value.replace(/\\/g, "/"));
              $(element).context.selectionStart = selectionStart;
              $(element).context.selectionEnd = selectionStart;
              return opts.source(req, resp);
            },
            select: function(event, ui) {
              lastLabel = ui.item.value;
              return valueAccessor()(opts._parse(ui.item));
            },
            change: function(event, ui) {
              var val;
              if (lastLabel !== $(element).val()) {
                lastLabel = $(element).val();
                val = opts._parse(opts._empty());
                if (_u.trim($(element).val()) && !bindingOpts.prohibitNew) {
                  val = opts._parse({
                    key: -1,
                    value: $(element).val(),
                    label: $(element).val()
                  });
                }
                return valueAccessor()(val);
              }
            }
          };
          $(element).blur(function() {
            var value;
            value = ko.utils.unwrapObservable(valueAccessor());
            value = opts._format(value);
            if ($(element).val() !== value.value) {
              return $(element).autocomplete('option', 'change').call($(element));
            }
          });
          return $(element).autocomplete(autocompleteOpts);
        },
        update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var value;
          value = ko.utils.unwrapObservable(valueAccessor());
          value = opts._format(value);
          if ($(element).val() !== value.value) {
            this.lastLabel = value.value;
            return $(element).val(value.value);
          }
        }
      };
    };
    return {
      ini: ini
    };
  });

}).call(this);
