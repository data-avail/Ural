// Generated by CoffeeScript 1.3.3
(function() {

  define(["Ural/Modules/pubSub", "Ural/Libs/jquery.dynatree", "Ural/Plugins/baio.tree-widget"], function(pubSub) {
    var ini, _getOpts, _iniToolbox;
    _getOpts = function(selector, treeOpts, iniOpts) {
      var opts;
      opts = {
        select: "single",
        source: iniOpts.source,
        update: iniOpts.update,
        remove: iniOpts.remove,
        editable: true,
        onSelected: function(node) {
          if (selector) {
            return selector.select(node);
          }
        },
        selected: selector ? selector.getSelected() : null
      };
      if (treeOpts) {
        if (selector) {
          opts.select = treeOpts.multi ? "multi" : "single";
        } else {
          opts.select = false;
        }
        if (treeOpts.link) {
          opts.link = treeOpts.link;
        }
        if (treeOpts.selectedLink) {
          opts.selectedLink = treeOpts.selectedLink;
        }
        if (treeOpts.root) {
          opts.root = treeOpts.root;
        }
        if (treeOpts.editable === false) {
          opts.editable = false;
        }
      }
      return opts;
    };
    _iniToolbox = function(tr) {
      return pubSub.subOnce("selector", "toolbox", "selector", function(data) {
        var t;
        if (typeof data.data === "string") {
          t = $("#" + data.data);
        } else {
          t = tr;
        }
        switch (data.action) {
          case "add":
            return t.tree("add");
          case "add_root":
            return t.tree("addRoot");
          case "rename":
            return t.tree("rename");
          case "remove":
            return t.tree("remove");
        }
      });
    };
    ini = function(iniOpts) {
      return ko.bindingHandlers.tree = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
          var lt, selector, tr, treeOpts;
          selector = ko.utils.unwrapObservable(valueAccessor());
          treeOpts = allBindingsAccessor().treeOpts;
          lt = treeOpts && treeOpts.layout ? $("#" + treeOpts.layout) : $(element);
          if (selector === null) {
            tr = lt.tree(_getOpts(selector, treeOpts, iniOpts));
            return _iniToolbox(tr);
          } else {
            return $(element).click(function(event) {
              event.preventDefault();
              lt.tree("destroy");
              tr = lt.tree(_getOpts(selector, treeOpts, iniOpts));
              _iniToolbox(tr);
              return selector.start();
            });
          }
        }
      };
    };
    return {
      ini: ini
    };
  });

}).call(this);
