// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["Ural/Models/itemVM"], function(itemVM) {
    var ItemRefVM;
    ItemRefVM = (function(_super) {

      __extends(ItemRefVM, _super);

      function ItemRefVM(indexRefVM, typeName) {
        this.indexRefVM = indexRefVM;
        ItemRefVM.__super__.constructor.call(this, typeName);
      }

      ItemRefVM.prototype._getMode = function() {
        return "updateParent";
      };

      ItemRefVM.prototype.cancel = function() {
        if (this.item.id() === -1) {
          this.onNotifyChanged("removed", null, {
            ignore_msg: true
          });
        }
        return ItemRefVM.__super__.cancel.call(this);
      };

      ItemRefVM.prototype.onEdit = function(onDoneCallback) {
        if (this.item.id() === -1) {
          this.indexRefVM.add(this);
        }
        return ItemRefVM.__super__.onEdit.call(this, onDoneCallback);
      };

      ItemRefVM.prototype.update = function(onDone) {
        var type;
        if (this._getMode() === "updateParent") {
          if (this.isValid()) {
            return this.indexRefVM.parentItemVM.update(onDone);
          } else {
            type = this.item.id() === -1 ? "added" : "updated";
            this.showValidationError(true);
            return this.onNotifyChanged(type, __g.i18n.messages.validation_error);
          }
        } else {
          return onDone(null);
        }
      };

      ItemRefVM.prototype.remove = function(onDone) {
        var _this = this;
        if (this._getMode() === "updateParent") {
          this.onNotifyChanged("removed", null, {
            ignore_msg: true
          });
          return this.indexRefVM.parentItemVM.update(function(err) {
            _this.onNotifyChanged("removed", err);
            if (onDone) {
              return onDone(err);
            }
          });
        } else {
          return onDone(null);
        }
      };

      ItemRefVM.prototype.onNotifyChanged = function(type, err, opts) {
        if (type !== "added") {
          return ItemRefVM.__super__.onNotifyChanged.call(this, type, err, opts);
        } else {
          opts = {
            ignore_insert: true
          };
          return ItemRefVM.__super__.onNotifyChanged.call(this, type, err, opts);
        }
      };

      ItemRefVM.prototype.onUpdate = function(state, onDone) {
        return onDone(null, this.item);
      };

      ItemRefVM.prototype.onRemove = function(onDone) {
        return onDone(null, this.item);
      };

      return ItemRefVM;

    })(itemVM.ItemVM);
    return {
      ItemRefVM: ItemRefVM
    };
  });

}).call(this);
