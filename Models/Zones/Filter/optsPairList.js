// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var OptsPairList;
    OptsPairList = (function() {

      function OptsPairList(field, opts, selectedOpts, valSerializer, exprField) {
        var _ref,
          _this = this;
        this.field = field;
        this.valSerializer = valSerializer;
        this.exprField = exprField;
        this.push = __bind(this.push, this);

        this.selectAllNullExpr = true;
        this.opts = ko.observableArray();
        this.selectedOpts = ko.observableArray();
        this.activeOpts = ko.observableArray();
        this.unselectedOpts = ko.computed(function() {
          var sid;
          sid = _this.selectedOpts().map(function(m) {
            return m.id();
          });
          return _this.opts().filter(function(f) {
            return sid.indexOf(f.id()) === -1;
          });
        });
        this.refresh(opts, selectedOpts);
        this.expr = ko.computed(function() {
          var json, selected, t, _i, _len, _ref;
          selected = _this.selectedOpts();
          if (selected.length && (selected.length !== _this.opts().length || !_this.selectAllNullExpr)) {
            json = eval("({'" + field + "' : {'$in' : []}})");
            _ref = _this.selectedOpts();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              t = _ref[_i];
              json[field].$in.push(_this.getExprArg(t));
            }
          }
          return json;
        });
        if ((_ref = this.valSerializer) == null) {
          this.valSerializer = {
            serialize: function(val) {
              return val;
            },
            deserialize: function(obj) {
              return obj;
            }
          };
        }
      }

      OptsPairList.prototype.refresh = function(opts, selectedOpts) {
        var d, sid;
        if (opts) {
          d = (Array.isArray(opts) ? opts : opts()).map(function(m) {
            return m;
          });
          this.opts(d);
        }
        if (selectedOpts) {
          d = (Array.isArray(selectedOpts) ? selectedOpts : selectedOpts()).map(function(m) {
            return m;
          });
          return this.selectedOpts(d);
        } else {
          sid = this.opts().map(function(m) {
            return m.id();
          });
          d = this.selectedOpts().filter(function(f) {
            return sid.indexOf(f.id()) !== -1;
          });
          return this.selectedOpts(d.map(function(m) {
            return m;
          }));
        }
      };

      OptsPairList.prototype.getExprArg = function(opt) {
        if (this.exprField) {
          return opt[this.exprField]();
        } else if (opt.id) {
          return opt.id();
        } else {
          return opt;
        }
      };

      OptsPairList.prototype.push = function(item, event) {
        if (!this.selectedOpts().filter(function(f) {
          return f.id() === item.id();
        }).length) {
          return this.selectedOpts.push(item);
        }
      };

      OptsPairList.prototype.update = function(fromExpr) {
        var _this = this;
        this.selectedOpts.removeAll();
        return this.selectedOpts(fromExpr[this.field].$in.map(function(m) {
          return _this.valSerializer.deserialize(m);
        }));
      };

      OptsPairList.prototype.toggleSelect = function(data, event) {
        var r, selected,
          _this = this;
        event.preventDefault();
        selected = this.selectedOpts().filter(function(f) {
          return _this.activeOpts().indexOf(f.id()) !== -1;
        });
        r = this.opts().filter(function(f) {
          return _this.activeOpts().indexOf(f.id()) !== -1;
        });
        if (selected.length) {
          return this.selectedOpts.removeAll(r);
        } else {
          r = r.concat(this.selectedOpts());
          return this.selectedOpts(r.map(function(m) {
            return m;
          }));
        }
      };

      OptsPairList.prototype.selectAll = function(data, event) {
        event.preventDefault();
        return this.selectedOpts(this.opts().map(function(m) {
          return m;
        }));
      };

      OptsPairList.prototype.unselectAll = function(data, event) {
        event.preventDefault();
        return this.selectedOpts.removeAll();
      };

      OptsPairList.prototype.serialize = function() {
        var _this = this;
        return {
          vals: this.selectedOpts().map(function(i) {
            return _this.valSerializer.serialize(i);
          })
        };
      };

      OptsPairList.prototype.deserialize = function(obj) {
        var _this = this;
        if (obj.vals) {
          return this.selectedOpts(obj.vals.map(function(m) {
            return _this.valSerializer.deserialize(m);
          }).filter(function(f) {
            return f;
          }));
        }
      };

      return OptsPairList;

    })();
    return {
      OptsPairList: OptsPairList
    };
  });

}).call(this);
