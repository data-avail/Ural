// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var OptsList;
    OptsList = (function() {

      function OptsList(field, opts, selectedOpts, valSerializer) {
        var t, _i, _j, _len, _len1, _ref,
          _this = this;
        this.field = field;
        this.valSerializer = valSerializer;
        this.push = __bind(this.push, this);

        this.opts = ko.observableArray();
        this.selectedOpts = ko.observableArray();
        if (opts) {
          for (_i = 0, _len = opts.length; _i < _len; _i++) {
            t = opts[_i];
            this.opts.push(t);
          }
        }
        if (selectedOpts) {
          for (_j = 0, _len1 = selectedOpts.length; _j < _len1; _j++) {
            t = selectedOpts[_j];
            this.selectedOpts.push(t);
          }
        }
        this.expr = ko.computed(function() {
          var json, _k, _len2, _ref;
          if (_this.selectedOpts().length) {
            json = eval("({'" + field + "' : {'$in' : []}})");
            _ref = _this.selectedOpts();
            for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
              t = _ref[_k];
              json[field].$in.push(_this.getExprArg(t));
            }
          }
          return json;
        });
        if ((_ref = this.valSerializer) == null) {
          this.valSerializer = {
            serialize: function(val) {
              return val;
            },
            deserialize: function(obj) {
              return obj;
            }
          };
        }
      }

      OptsList.prototype.getExprArg = function(opt) {
        if (opt.id) {
          return opt.id();
        } else {
          return opt;
        }
      };

      OptsList.prototype.push = function(item, event) {
        if (!this.selectedOpts().filter(function(f) {
          return f.id() === item.id();
        }).length) {
          return this.selectedOpts.push(item);
        }
      };

      OptsList.prototype.update = function(fromExpr) {
        var f, _i, _len, _ref, _results;
        this.selectedOpts.removeAll();
        _ref = fromExpr[this.field].$in;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          f = this.valSerializer.deserialize(f);
          _results.push(this.selectedOpts.push(f));
        }
        return _results;
      };

      OptsList.prototype.serialize = function() {
        var _this = this;
        return {
          vals: this.selectedOpts().map(function(i) {
            return _this.valSerializer.serialize(i);
          })
        };
      };

      OptsList.prototype.deserialize = function(obj) {
        var v, _i, _len, _ref, _results;
        this.selectedOpts.removeAll();
        this.selectedOpts.push(this.opts()[0]);
        if (obj.vals) {
          _ref = obj.vals;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(this.selectedOpts.push(this.valSerializer.deserialize(v)));
          }
          return _results;
        }
      };

      return OptsList;

    })();
    return {
      OptsList: OptsList
    };
  });

}).call(this);
