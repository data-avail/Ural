// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(function() {
    var FilterPanel;
    FilterPanel = (function() {

      function FilterPanel(filters, orderBy) {
        var f, _i, _len, _ref;
        this.filters = filters;
        this.orderBy = orderBy;
        _ref = this.filters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          this[f.name] = ko.observable(f.item);
        }
      }

      FilterPanel.prototype.update = function(from) {
        var f, filter, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = from.length; _i < _len; _i++) {
          f = from[_i];
          filter = this[f.__meta.name];
          if (filter) {
            _results.push(filter().update(f));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      FilterPanel.prototype._expr = function(isCustom) {
        var r;
        r = this.filters.filter(function(f) {
          return (!isCustom && !f.item.isCustom) || (isCustom && f.item.isCustom);
        }).map(function(f) {
          return f.item.expr();
        }).filter(function(f) {
          return f;
        });
        if (r.length) {
          return r;
        } else {
          return null;
        }
      };

      FilterPanel.prototype.expr = function() {
        var r;
        r = this._expr(false);
        if (r) {
          return {
            $and: r
          };
        } else {
          return null;
        }
      };

      FilterPanel.prototype.custom = function() {
        var r;
        r = this._expr(true);
        if (r) {
          return {
            $and: r
          };
        } else {
          return null;
        }
      };

      FilterPanel.prototype.exprMeta = function() {
        var i, m, p, res, _i, _len, _ref;
        res = {};
        _ref = this.filters.filter(function(f) {
          return f.item.exprMeta;
        });
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          m = i.item.exprMeta();
          for (p in m) {
            if (!__hasProp.call(m, p)) continue;
            break;
          }
          res[p] = m[p];
        }
        if ($.isEmptyObject(res)) {
          return null;
        } else {
          return res;
        }
      };

      FilterPanel.prototype.order = function() {
        if (this.orderBy) {
          return this.orderBy.expr();
        } else {
          return null;
        }
      };

      FilterPanel.prototype.change = function() {
        if (this.onChangedCallback) {
          return this.onChangedCallback(this.expr(), this.order(), this.custom());
        }
      };

      FilterPanel.prototype.onChanged = function(onChangedCallback) {
        this.onChangedCallback = onChangedCallback;
      };

      FilterPanel.prototype.serialize = function() {
        var f, res, _i, _len, _ref;
        res = [];
        _ref = this.filters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          if (f.item.serialize) {
            res.push({
              name: f.name,
              expr: f.item.serialize()
            });
          }
        }
        if (this.orderBy && this.orderBy.serialize) {
          res.push({
            name: "$orderby",
            expr: this.orderBy.serialize()
          });
        }
        return res;
      };

      FilterPanel.prototype.deserialize = function(obj, onDone) {
        var d, f, _i, _len, _ref;
        if (obj) {
          _ref = this.filters;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            f = _ref[_i];
            if (f.item.deserialize) {
              d = obj.filter(function(i) {
                return i.name === f.name;
              })[0];
              if (d) {
                f.item.deserialize(d.expr);
              }
            }
          }
          if (this.orderBy && this.orderBy.deserialize) {
            d = obj.filter(function(i) {
              return i.name === "$orderby";
            })[0];
            if (d) {
              this.orderBy.deserialize(d.expr);
            }
          }
        }
        return onDone();
      };

      return FilterPanel;

    })();
    return {
      FilterPanel: FilterPanel
    };
  });

}).call(this);
