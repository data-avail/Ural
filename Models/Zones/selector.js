// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["Ural/Modules/pubSub"], function(pubSub) {
    var Selector, SelectorToolbox, SelectorsList, TreeSelector;
    SelectorsList = (function() {

      function SelectorsList() {
        this.toolbox = new SelectorToolbox();
      }

      SelectorsList.prototype.add = function(name, Selector) {
        return this[name] = Selector;
      };

      return SelectorsList;

    })();
    Selector = (function() {

      function Selector(form, indexVM, onSelect) {
        this.form = form;
        this.indexVM = indexVM;
        this.onSelect = onSelect;
        this.select = __bind(this.select, this);

        this.start = __bind(this.start, this);

      }

      Selector.prototype.update = function(filter) {
        return this.indexVM.load({
          $filter: filter
        });
      };

      Selector.prototype.start = function(data, event) {
        event.preventDefault();
        pubSub.pub("selector", "show", {
          form: this.form
        });
        return this.update();
      };

      Selector.prototype.select = function(itemVM, event) {
        if (event) {
          event.preventDefault();
        }
        this.onSelect(itemVM);
        return pubSub.pub("selector", "hide", {
          form: this.form
        });
      };

      Selector.prototype.cancel = function(itemVM, event) {
        event.preventDefault();
        return pubSub.pub("selector", "hide", {
          form: this.form
        });
      };

      Selector.prototype.addNew = function(data, event) {
        var _this = this;
        if (event) {
          event.preventDefault();
        }
        return pubSub.pub("selector", "addNew", {
          type: this.indexVM.typeName
        }, function(err, item) {
          if (item) {
            _this.indexVM.add(item);
            return _this.select(item);
          }
        });
      };

      return Selector;

    })();
    TreeSelector = (function() {

      function TreeSelector(form, getSelected, onSelect) {
        this.form = form;
        this.getSelected = getSelected;
        this.onSelect = onSelect;
        this.select = __bind(this.select, this);

        this.start = __bind(this.start, this);

      }

      TreeSelector.prototype.start = function(data, event) {
        if (event) {
          event.preventDefault();
        }
        return pubSub.pub("selector", "show", {
          form: this.form
        });
      };

      TreeSelector.prototype.select = function(node, event) {
        if (event) {
          event.preventDefault();
        }
        this.onSelect(node);
        return pubSub.pub("selector", "hide", {
          form: this.form
        });
      };

      TreeSelector.prototype.cancel = function(itemVM, event) {
        if (event) {
          event.preventDefault();
        }
        return pubSub.pub("selector", "hide", {
          form: this.form
        });
      };

      return TreeSelector;

    })();
    SelectorToolbox = (function() {

      function SelectorToolbox() {}

      SelectorToolbox.prototype.addRoot = function(data, event) {
        return pubSub.pub("selector", "toolbox", {
          action: "add_root",
          data: data
        });
      };

      SelectorToolbox.prototype.add = function(data, event) {
        return pubSub.pub("selector", "toolbox", {
          action: "add",
          data: data
        });
      };

      SelectorToolbox.prototype.rename = function(data, event) {
        return pubSub.pub("selector", "toolbox", {
          action: "rename",
          data: data
        });
      };

      SelectorToolbox.prototype.remove = function(data, event) {
        return pubSub.pub("selector", "toolbox", {
          action: "remove",
          data: data
        });
      };

      return SelectorToolbox;

    })();
    return {
      SelectorsList: SelectorsList,
      Selector: Selector,
      TreeSelector: TreeSelector,
      SelectorToolbox: SelectorToolbox
    };
  });

}).call(this);
