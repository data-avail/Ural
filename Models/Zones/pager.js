// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var Pager;
    Pager = (function() {

      function Pager() {
        this.moveTo = __bind(this.moveTo, this);

        var _this = this;
        this.current = ko.observable(0);
        this.pagesCount = ko.observable(0);
        this.canMovePerv = ko.computed(function() {
          return _this.current() > 1;
        });
        this.canMoveNext = ko.computed(function() {
          return _this.current() < _this.pagesCount();
        });
        this.movingTo = ko.observable(null);
        this.sequence = ko.computed(function() {
          var _i, _ref, _results;
          return (function() {
            _results = [];
            for (var _i = 1, _ref = _this.pagesCount(); 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this);
        });
      }

      Pager.prototype.onChanged = function(onChangedCallback) {
        this.onChangedCallback = onChangedCallback;
      };

      Pager.prototype.movePerv = function() {
        return this.moveTo(this.current() - 1);
      };

      Pager.prototype.moveNext = function() {
        return this.moveTo(this.current() + 1);
      };

      Pager.prototype.moveTo = function(page) {
        if (this.onChangedCallback) {
          this.movingTo(page);
          return this.onChangedCallback(page);
        }
      };

      Pager.prototype.setPaging = function(data) {
        this.movingTo(null);
        this.current(data.page);
        return this.pagesCount(data.latestLoadCount >= data.itemsPerPage ? data.page + 1 : data.page);
      };

      return Pager;

    })();
    return {
      Pager: Pager
    };
  });

}).call(this);
