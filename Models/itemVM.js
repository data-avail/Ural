// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  define(["Ural/Modules/DataProvider", "Ural/Modules/pubSub"], function(dataProvider, pubSub) {
    var ItemVM;
    ItemVM = (function() {

      function ItemVM(typeName) {
        this.typeName = typeName;
        this.edit = __bind(this.edit, this);

        this.originItem = null;
        this.zones = {};
        this.endPointBinding = null;
      }

      ItemVM.prototype.map = function(data, ini, onDone) {
        var _this = this;
        return require(["Models/" + (this.typeName.toLowerCase())], function(module) {
          var meta, _ref;
          if (module && module.metadata) {
            meta = module.metadata;
            if (!meta) {
              throw "not impl: meta must be defined";
            }
            if (!meta.mapping) {
              throw "not impl: mapping must be defined";
            }
            if ((_ref = meta.def) == null) {
              meta.def = {};
            }
            if (!data && !ini) {
              throw "data arg must be provided";
            }
            if (ini) {
              _this.item = new module.ModelConstructor();
              _this.endPointBinding = ItemVM._getEndPointBinding(module);
              ko.mapping.fromJS((data ? data : meta.def), meta.mapping, _this.item);
              if (meta.viewModels) {
                return require(["Ural/Models/indexRefVM"], function(indexRefVM) {
                  var viewModel, _i, _len, _ref1;
                  _ref1 = meta.viewModels;
                  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                    viewModel = _ref1[_i];
                    _this.item[viewModel.name] = new indexRefVM.IndexRefVM(_this, viewModel.typeName, _this.item[viewModel.field]);
                  }
                  return onDone(null, _this);
                });
              } else {
                return onDone(null, _this);
              }
            } else {
              _this._prepareMap();
              ko.mapping.fromJS(data, meta.mapping, _this.item);
              return onDone(null, _this);
            }
          } else {
            if (ini) {
              if (module && module.ModelConstructor) {
                _this.item = new module.ModelConstructor();
                ko.mapping.fromJS(data, {}, _this.item);
              } else {
                _this.item = data;
              }
              return onDone(null, _this);
            }
          }
        });
      };

      ItemVM.prototype.load = function(id, onDone) {
        var _this = this;
        return dataProvider.get().load(this.typeName, {
          $filter: {
            id: {
              $eq: id
            }
          },
          $expand: "$item"
        }, function(err, data) {
          if (!err) {
            return _this.map(data[0], true, onDone);
          } else {
            return onDone(err);
          }
        });
      };

      ItemVM.prototype._createOrigin = function() {
        return this.originItem = ko.mapping.toJS(this.item);
      };

      ItemVM.prototype._copyFromOrigin = function() {
        return ko.mapping.fromJS(this.originItem, this.mappingRules, this.item);
      };

      ItemVM.prototype.getState = function() {
        return ItemVM._getState(this.originItem, this.item);
      };

      ItemVM._isModified = function(state) {
        var f, i, p, val, _i, _len;
        for (p in state) {
          if (!__hasProp.call(state, p)) continue;
          val = state[p];
          f = true;
          if (typeof val === "object") {
            f = ItemVM._isModified(val);
          } else if (Array.isArray(val)) {
            for (_i = 0, _len = val.length; _i < _len; _i++) {
              i = val[_i];
              f = IemVM._isModified(val);
              if (f) {
                break;
              }
            }
          } else {
            f = val === "added" || val === "removed" || val === "modifyed";
          }
          if (f) {
            return true;
          }
        }
        return false;
      };

      ItemVM.prototype.isModified = function() {
        return ItemVM._isModified(this.getState());
      };

      ItemVM.prototype._prepareMap = function() {
        return _u.iterObj(this.item, function(type, val, _val) {
          if (type === "array") {
            if (val.remove) {
              return val.remove(function(v) {
                if (ko.isObservable(v.id)) {
                  return v.id() === -1;
                }
              });
            } else {
              return false;
            }
          } else if (type === "object" && val === _val) {
            return false;
          }
        });
      };

      ItemVM._getState = function(item, observItem) {
        var prop, r, removed, res, v, val, _i, _j, _len, _len1, _val;
        res = {};
        if (item) {
          if (!item.id || item.id === -1) {
            res.__status = "added";
          }
          for (prop in item) {
            if (!__hasProp.call(item, prop)) continue;
            if (prop === "constructor") {
              continue;
            }
            val = item[prop];
            _val = observItem[prop];
            if ($.isFunction(_val)) {
              _val = _val();
            }
            if (prop === "id") {
              res.id = val;
              if (val !== _val) {
                if (_val === __g.nullRefVal()) {
                  res.__status = "removed";
                  return res;
                } else {
                  res[prop] = "modifyed";
                  return res;
                }
              }
            } else if (Array.isArray(val)) {
              removed = val.filter(function(v) {
                return ko.utils.arrayFirst(_val, function(i) {
                  return i.id() === v.id;
                }) === null;
              }).map(function(v) {
                return v.id;
              });
              res[prop] = _val.map(function(v) {
                return ItemVM._getState(val.filter(function(f) {
                  return f.id === v.id();
                })[0], v);
              });
              for (_i = 0, _len = removed.length; _i < _len; _i++) {
                r = removed[_i];
                res[prop].push({
                  id: r,
                  __status: "removed"
                });
              }
            } else if (val !== null && !(val instanceof Date) && typeof val === "object") {
              res[prop] = ItemVM._getState(val, _val);
            } else {
              res[prop] = val !== _val ? "modifyed" : "unchanged";
            }
          }
        } else {
          res.__status = "added";
          for (prop in observItem) {
            if (!__hasProp.call(observItem, prop)) continue;
            _val = observItem[prop];
            if ($.isFunction(_val)) {
              _val = _val();
            }
            if (Array.isArray(_val)) {
              for (_j = 0, _len1 = _val.length; _j < _len1; _j++) {
                v = _val[_j];
                res[prop] = {
                  __status: "added"
                };
              }
            } else if (typeof _val === "object") {
              res[prop] = {
                __status: "added"
              };
            }
          }
        }
        return res;
      };

      ItemVM._getEndPointBinding = function(module) {
        if (module.metadata && module.metadata.endPointBinding) {
          return module.metadata.endPointBinding;
        }
      };

      ItemVM.prototype.edit = function(viewModel, event, formType, callback) {
        var _this = this;
        if (event) {
          event.preventDefault();
        }
        this.onEdit(function(err, cancel) {
          _this.hideEdit(null, null, formType);
          _this.onDoneCallback = null;
          if (callback) {
            return callback(err, cancel);
          }
        });
        return this.showEdit(null, null, formType);
      };

      ItemVM.prototype.showEdit = function(viewModel, event, formType) {
        if (formType == null) {
          formType = "edit";
        }
        if (event) {
          event.preventDefault();
        }
        return pubSub.pub("model", "edit", {
          formType: formType,
          itemVM: this
        });
      };

      ItemVM.prototype.hideEdit = function(viewModel, event, formType) {
        if (formType == null) {
          formType = "edit";
        }
        if (event) {
          event.preventDefault();
        }
        return pubSub.pub("model", "end_edit", {
          formType: formType,
          itemVM: this
        });
      };

      ItemVM.prototype.onEdit = function(onDoneCallback) {
        this.onDoneCallback = onDoneCallback;
        this.showValidationError(false);
        if (this.isEdit()) {
          this.endEdit();
        }
        return this._createOrigin();
      };

      ItemVM.prototype.showValidationError = function(show) {
        if (this.item.errors) {
          return this.item.errors.showAllMessages(show);
        }
      };

      ItemVM.prototype.isValid = function() {
        return !this.item.isValid || this.item.isValid();
      };

      ItemVM.prototype.onDone = function(err, cancel) {
        if (!err) {
          this.endEdit();
          if (this.onDoneCallback) {
            return this.onDoneCallback(err, cancel);
          }
        }
      };

      /*
          showUpdateMessage: (err) ->
            if !err
              pubSub.msg __g.i18n.messages.update_success
            else
              pubSub.msg err, __g.i18n.messages.update_fail, "error"
      */


      ItemVM.prototype.endEdit = function() {
        if (!this.isEdit()) {
          throw "item not in edit state";
        }
        return this.originItem = null;
      };

      ItemVM.prototype.cancel = function() {
        return this._save(true);
      };

      ItemVM.prototype.isEdit = function() {
        return this.originItem !== null;
      };

      ItemVM.prototype.save = function(data, event) {
        event.preventDefault();
        return this._save(false);
      };

      ItemVM.prototype._save = function(isCancel) {
        var type,
          _this = this;
        if (!this.isEdit()) {
          throw "item not in edit state";
        }
        if (isCancel) {
          this._copyFromOrigin();
          return this.onDone(null, true);
        } else {
          type = this.item.id() === -1 ? "added" : "updated";
          return this.update(function(err) {
            _this.onNotifyChanged(type, err);
            return _this.onDone(err, false);
          });
        }
      };

      ItemVM.prototype._fixEdit = function() {
        return this._createOrigin();
      };

      ItemVM.prototype.onNotifyChanged = function(type, err, opts) {
        return pubSub.pub("model", "list_changed", {
          itemVM: this,
          changeType: type,
          err: err,
          opts: opts
        });
      };

      ItemVM.prototype.update = function(onDone) {
        var _this = this;
        if (this.isValid()) {
          this.onNotifyChanged("update_begin");
          if (this.isModified()) {
            console.log("modifyed");
            return this.onUpdate(this.getState(), function(err) {
              if (!err) {
                _this._fixEdit();
              }
              if (onDone) {
                return onDone(err);
              }
            });
          } else {
            if (onDone) {
              return onDone(__g.i18n.messages.nothing_to_commit);
            }
          }
        } else {
          this.showValidationError(true);
          if (onDone) {
            return onDone(__g.i18n.messages.validation_error);
          }
        }
      };

      ItemVM.prototype.remove = function(onDone) {
        var _this = this;
        this.onNotifyChanged("update_begin");
        return this.onRemove(function(err) {
          _this.onNotifyChanged("removed", err);
          if (onDone) {
            return onDone(err, _this.item);
          }
        });
      };

      ItemVM.prototype._mapToData = function() {
        var data;
        data = ko.mapping.toJS(this.item);
        if (this.item.__ko_mapping__.__afterToJS) {
          this.item.__ko_mapping__.__afterToJS(data);
        }
        return data;
      };

      ItemVM.prototype.onUpdate = function(state, onDone) {
        var dataForSave,
          _this = this;
        dataForSave = this._mapToData();
        dataForSave.__state = state;
        if (this.endPointBinding) {
          dataForSave.__endPointBinding = this.endPointBinding;
        }
        return async.waterfall([
          function(ck) {
            return _this.onSave(_this.typeName, dataForSave, ck);
          }, function(data, ck) {
            return _this.map(data, false, ck);
          }
        ], onDone);
      };

      ItemVM.prototype.onRemove = function(onDone) {
        return dataProvider.get()["delete"](this.typeName, this.item.id(), onDone);
      };

      ItemVM.prototype.onSave = function(typeName, dataForSave, onDone) {
        return dataProvider.get().save(typeName, dataForSave, onDone);
      };

      return ItemVM;

    })();
    return {
      ItemVM: ItemVM
    };
  });

}).call(this);
