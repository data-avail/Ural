// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["Ural/Modules/pubSub", "Ural/Models/itemVM", "Ural/Modules/DataProvider"], function(pubSub, itemVM, dataProvider) {
    var IndexVM;
    IndexVM = (function() {

      function IndexVM(typeName, list) {
        var _this = this;
        this.typeName = typeName;
        this.remove = __bind(this.remove, this);

        this.moveToDetails = __bind(this.moveToDetails, this);

        this.detail = __bind(this.detail, this);

        this.edit = __bind(this.edit, this);

        this.active = ko.observable();
        this.list = !list ? ko.observableArray() : list;
        pubSub.sub("model", "list_changed", function(data) {
          return _this._itemChanged(data);
        });
      }

      IndexVM.prototype.map = function(data, onDone) {
        var _this = this;
        return async.mapSeries(data, function(d, ck) {
          var item;
          item = _this.onCreateItemVM();
          return item.map(d, true, ck);
        }, function(err, ivms) {
          if (!err) {
            _this._updateList(ivms);
          }
          if (onDone) {
            return onDone(err, data);
          }
        });
      };

      IndexVM.prototype._updateList = function(items) {
        var ivm, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          ivm = items[_i];
          _results.push(this.list.push(ivm));
        }
        return _results;
      };

      IndexVM.prototype.onCreateItemVM = function() {
        return new itemVM.ItemVM(this.typeName);
      };

      IndexVM.prototype._checkEventHandler = function(event, name, type) {
        var eventHandler;
        eventHandler = $(event.target).attr("data-event-handler");
        if (eventHandler) {
          return eventHandler.split(":")[0] === name && eventHandler.split(":")[1] === type;
        } else {
          return true;
        }
      };

      IndexVM.prototype.edit = function(viewModel, event, type, onDone) {
        var _this = this;
        if (event) {
          if (!this._checkEventHandler(event, "edit", type)) {
            return;
          }
          event.preventDefault();
        }
        if (this.active()) {
          this.active().cancel();
        }
        this.active(viewModel);
        return viewModel.edit(null, null, type, function(err, cancel) {
          _this.active(null);
          if (onDone) {
            return onDone(err, cancel);
          }
        });
      };

      IndexVM.prototype.detail = function(viewModel, event) {
        this.active(viewModel);
        return this.moveToDetails(viewModel.item, event);
      };

      IndexVM.prototype.moveToDetails = function(item, event) {
        if (!this._checkEventHandler(event, "detail")) {
          return;
        }
        event.preventDefault();
        if (this.active() && this.active().isEdit()) {
          this.active().cancel();
        }
        return pubSub.pub("model", "detail", item);
      };

      IndexVM.prototype.remove = function(viewModel, event) {
        if (event) {
          if (!this._checkEventHandler(event, "remove")) {
            return;
          }
          event.preventDefault();
        }
        return this.onRemove(viewModel);
      };

      IndexVM.prototype.onRemove = function(viewModel) {
        /*
              if @active()
                @active().cancel()
        */
        return viewModel.remove();
      };

      IndexVM.prototype.add = function(items, order) {
        var fromList, item, _i, _len, _results;
        if (!Array.isArray(items)) {
          items = [items];
        }
        if (items.length && _u.getClassName(items[0].item) === this.typeName) {
          _results = [];
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            fromList = this.list().filter(function(i) {
              return i.item === item.item;
            })[0];
            if (!fromList) {
              _results.push(this.onAdded(item, order));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      };

      IndexVM.prototype.onAdded = function(viewModel, order) {
        if (!order || order === "top") {
          return this.list.splice(0, 0, viewModel);
        } else {
          return this.list.push(viewModel);
        }
      };

      IndexVM.prototype.onRemoved = function(viewModel) {
        return this.list.remove(viewModel);
      };

      IndexVM.prototype.replaceAll = function(items) {
        var _this = this;
        this.list.removeAll();
        return this._updateList(items.map(function(i) {
          var vm;
          vm = _this.onCreateItemVM();
          vm.item = i;
          return vm;
        }));
      };

      IndexVM.prototype.load = function(filter, isClear, callback) {
        var _this = this;
        return dataProvider.get().load(this.typeName, filter, function(err, data) {
          if (!err) {
            if (isClear) {
              _this.removeAll();
            }
            return _this.map(data, callback);
          } else {
            if (callback) {
              return callback(err, data);
            }
          }
        });
      };

      IndexVM.prototype.removeAll = function() {
        return this.list.removeAll();
      };

      IndexVM.prototype.addNew = function(item) {
        var ivm,
          _this = this;
        if (!item) {
          if (item == null) {
            item = {};
          }
        }
        ivm = this.onCreateItemVM();
        return ivm.map(item, true, function(err) {
          return _this.edit(ivm, null, "create", function(err, cancel) {
            if (!cancel && !err) {
              return _this.add(ivm);
            }
          });
        });
      };

      IndexVM.prototype._itemChanged = function(data) {
        if (data.changeType === "added" && (!data.opts || !data.opts.ignore_insert)) {
          return this.add(data.itemVM);
        } else if (data.changeType === "removed") {
          if (_u.getClassName(data.itemVM.item) === this.typeName) {
            return this.onRemoved(data.itemVM);
          }
        }
      };

      IndexVM.prototype.addNewItem = function(item, onDone) {
        var vm,
          _this = this;
        vm = this.onCreateItemVM();
        return vm.map(item, true, function(err) {
          if (!err) {
            _this.onAdded(vm);
          }
          if (onDone) {
            return onDone(err);
          }
        });
      };

      return IndexVM;

    })();
    return {
      IndexVM: IndexVM
    };
  });

}).call(this);
