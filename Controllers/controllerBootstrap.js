// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["Ural/Controllers/controllerBase", "Ural/Models/Zones/selector"], function(controllerBase, itemToolbox, indexToolbox, selector) {
    var ControllerBootstrap;
    ControllerBootstrap = (function(_super) {

      __extends(ControllerBootstrap, _super);

      function ControllerBootstrap(modelName, opts) {
        ControllerBootstrap.__super__.constructor.call(this, modelName, opts);
        this._formsStack = [];
      }

      ControllerBootstrap.prototype.onShowForm = function($form, itemVM) {
        var _this = this;
        this._stackForm($form);
        $form.data("item", itemVM);
        $form.modal("show").on("hidden", function() {
          var i;
          if ($form.data("stacked") === "active") {
            i = $form.data("item");
            if (i && i.isEdit()) {
              i.cancel();
            }
            return _this._unstackActive();
          }
        });
        return $form.modal('show');
      };

      ControllerBootstrap.prototype.onHideForm = function($form) {
        return $form.modal('hide');
      };

      ControllerBootstrap.prototype._stackForm = function(form) {
        this._overrideActive();
        form = $(form);
        form.data("stacked", "active");
        return this._formsStack.push(form);
      };

      ControllerBootstrap.prototype._overrideActive = function() {
        var form;
        if (this._formsStack.length) {
          form = this._formsStack[this._formsStack.length - 1];
          form.data("stacked", "overriden");
          return this.onHideForm(form);
        }
      };

      ControllerBootstrap.prototype._unstackActive = function() {
        var form, pervForm;
        form = this._formsStack.pop();
        if (form) {
          form.data("stacked", null);
        }
        pervForm = this._formsStack[this._formsStack.length - 1];
        if (pervForm) {
          pervForm.data("stacked", "active");
          return pervForm.modal("show");
        }
      };

      return ControllerBootstrap;

    })(controllerBase.ControllerBase);
    return {
      ControllerBootstrap: ControllerBootstrap
    };
  });

}).call(this);
