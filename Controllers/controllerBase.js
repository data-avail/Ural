// Generated by CoffeeScript 1.3.3
(function() {

  define(["Ural/Models/indexVM", "Ural/Models/itemVM", "Ural/Modules/pubSub", "Ural/Models/Zones/state", "Ural/Modules/socket", "Ural/Libs/toastr"], function(indexVM, itemVM, pubSub, state, socket) {
    var ControllerBase;
    ControllerBase = (function() {

      function ControllerBase(modelName, opts) {
        var _base, _base1, _base2, _ref, _ref1, _ref2, _ref3, _ref4,
          _this = this;
        this.modelName = modelName;
        this.opts = opts;
        if ((_ref = this.modelName) == null) {
          this.modelName = this._getControllerName();
        }
        this.defaultIndexLayout = "Shared/_layout";
        this.defaultItemLayout = "Shared/_layout";
        this.defaultIndexBody = "index";
        this.defaultItemBody = "item";
        this.viewModel = null;
        if ((_ref1 = this.opts) == null) {
          this.opts = {};
        }
        if ((_ref2 = (_base = this.opts).index) == null) {
          _base.index = {};
        }
        if ((_ref3 = (_base1 = this.opts.index).itemsPerPage) == null) {
          _base1.itemsPerPage = 20;
        }
        if ((_ref4 = (_base2 = this.opts.index).clearOnPageMove) == null) {
          _base2.clearOnPageMove = true;
        }
        pubSub.subOnce("form", "show", "controller", function(data) {
          return _this.onShow(data.formId);
        });
        pubSub.subOnce("model", "edit", "controller", function(data, name) {
          return _this._showForm(data.formType, _u.getClassName(data.itemVM.item), data.itemVM);
        });
        pubSub.subOnce("model", "end_edit", "controller", function(data, name) {
          return _this._hideForm(data.formType, _u.getClassName(data.itemVM.item));
        });
        pubSub.subOnce("selector", "show", "controller", function(data) {
          return _this._showSelector(data.form);
        });
        pubSub.subOnce("selector", "hide", "controller", function(data) {
          return _this._hideSelector(data.form);
        });
        pubSub.subOnce("model", "detail", "controller", function(model, name) {
          return _this.onShowDetails(model, _u.getClassName(model));
        });
        pubSub.subOnce("message", "show", "controller", function(data) {
          return _this.onShowMessage(data.type, data.msg, data.cap);
        });
        pubSub.subOnce("router", "exec", "controller", function(data) {
          return _this._exec(data);
        });
        pubSub.subOnce("selector", "addNew", "controller", function(data, name, onDone) {
          return _this._addNewSelector(data.type, function(err, item) {
            return onDone(err, item);
          });
        });
        pubSub.subOnce("model", "list_changed", "controller", function(data, name) {
          return _this._listChanged(data);
        });
      }

      ControllerBase.prototype.onExec = function(method, prms) {
        return false;
      };

      ControllerBase.prototype._exec = function(data) {
        var args, method, prms, _i, _len, _ref, _results;
        _ref = data.args;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          args = _ref[_i];
          prms = args.splice(1, args.length - 1);
          if (!this.onExec(args[0], prms)) {
            method = eval("this." + args[0]);
            if (method) {
              _results.push(method.apply(this, prms));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      ControllerBase.prototype._listChanged = function(data) {
        return this.onListChanged(data.changeType, data.itemVM, data.err, data.opts);
      };

      ControllerBase.prototype.onListChanged = function(changeType, itemVM, err, opts) {
        var item;
        console.log("list changed : " + changeType + ", err : " + err + ", opts : " + opts);
        if (opts && opts.ignore_msg) {
          return;
        }
        if (changeType === "update_begin") {
          return this.onUpdateBegins();
        } else {
          if (err) {
            return this.onShowMessage("error", err, __g.i18n.messages.update_fail);
          } else {
            this.onShowMessage("success", __g.i18n.messages.update_success);
            item = this.isIndexContext() ? itemVM.item : this.viewModel.item;
            return this.onCommitModel(this.getId(item), itemVM, changeType);
          }
        }
      };

      ControllerBase.prototype.onUpdateBegins = function() {};

      ControllerBase.prototype.isIndexContext = function() {
        return _u.getClassName(this.viewModel) !== "ItemVM";
      };

      ControllerBase.prototype._showSelector = function(form) {
        return this.onShowForm($("[data-selector='" + form + "']"));
      };

      ControllerBase.prototype._addNewSelector = function(type, onDone) {
        if (this.viewModel.zones.toolbox && this.viewModel.zones.toolbox.addNew) {
          return this.viewModel.zones.toolbox.addNew(type, onDone);
        }
      };

      ControllerBase.prototype._hideSelector = function(form) {
        return this.onHideForm($("[data-selector='" + form + "']"));
      };

      ControllerBase.prototype._showForm = function(type, typeName, itemVM) {
        var form;
        form = $("[data-form-model-type='" + typeName + "'][data-form-type='" + type + "']");
        return this.onShowForm(form, itemVM);
      };

      ControllerBase.prototype.onShowForm = function($form, itemVM) {
        return $form.show();
      };

      ControllerBase.prototype._hideForm = function(type, typeName) {
        return this.onHideForm($("[data-form-model-type='" + typeName + "'][data-form-type='" + type + "']"));
      };

      ControllerBase.prototype.onCommitModel = function(rootId, itemVM, actionType) {};

      ControllerBase.prototype.onHideForm = function($form) {
        return $form.hide();
      };

      ControllerBase.prototype.onShow = function(formId) {
        var form;
        form = $("#" + formId);
        return this.onShowForm(form);
      };

      ControllerBase.prototype.onShowDetails = function(model, typeName) {
        return this.showDetails(this.getId(model), typeName, model);
      };

      ControllerBase.prototype.showDetails = function(id, typeName, model) {
        return window.location.hash = "/" + (typeName.toLowerCase()) + "/item/" + id;
      };

      ControllerBase.prototype.onShowMessage = function(type, msg, cap) {
        return _u.toastrMsg(type, msg, cap);
      };

      ControllerBase.prototype.getId = function(model) {
        if (!$.isFunction(model.id)) {
          return model.id;
        } else {
          return model.id();
        }
      };

      ControllerBase.prototype.action = function(name, type, modelType, filter, onDone) {
        var _this = this;
        if (type === "index") {
          this.modelName = _.str.capitalize(modelType);
          this.createIndexViewModel(null);
          return async.waterfall([
            function(ck) {
              return _this.onAction({
                action: name,
                begins: true
              }, ck);
            }, function(ck) {
              return _this.onIndex(null, null, null, filter, ck);
            }, function(data, ck) {
              return _this.onAction({
                action: name,
                begins: false
              }, ck);
            }
          ], function(err) {
            if (onDone) {
              return onDone(err);
            }
          });
        } else {
          throw {
            msg: "type arg out of range"
          };
        }
      };

      ControllerBase.prototype.onAction = function(context, onDone) {
        this.pubAction(context);
        return onDone();
      };

      ControllerBase.prototype.pubAction = function(context) {
        context.controller = this._getControllerName().toLowerCase();
        return pubSub.pub("controller", "action", context);
      };

      ControllerBase.prototype.index = function(filter, onDone) {
        return this.action("index", "index", this.modelName, filter, onDone);
      };

      ControllerBase.prototype.onIndex = function(type, bodyView, layoutView, filter, onDone) {
        var _this = this;
        if (bodyView == null) {
          bodyView = this.defaultIndexBody;
        }
        if (layoutView == null) {
          layoutView = this.defaultIndexLayout;
        }
        return async.waterfall([
          function(ck) {
            return _this.deserialize(_this.getDefaultDeserializedNames(), ck);
          }, function(ck) {
            return _this.onLoadIndex(filter, true, ck);
          }, function(cnt, ck) {
            return _this.view(bodyView, layoutView, ck);
          }
        ], function(err) {
          if (onDone) {
            return onDone(err, _this.viewModel);
          }
        });
      };

      ControllerBase.prototype.onLoadIndex = function(userFilter, isFiltering, onDone) {
        var filter, fr, isCleanUp, pr, skipLoad,
          _this = this;
        skipLoad = userFilter && userFilter.$skipLoad;
        if (skipLoad) {
          userFilter = null;
        }
        filter = {
          $page: 1,
          $itemsPerPage: this.opts.index.itemsPerPage,
          $expand: "$index"
        };
        if (userFilter) {
          $.extend(filter, userFilter);
        }
        fr = this.filterZone();
        pr = this.pagerZone();
        if (fr) {
          filter.$filter = fr.expr();
          filter.$orderby = fr.order();
          if (fr.custom()) {
            filter.$args = {
              customFilter: fr.custom()
            };
          }
        }
        if (!skipLoad) {
          this.onLoadBegins("index", isFiltering);
          isCleanUp = isFiltering || this.opts.index.clearOnPageMove;
          return this.viewModel.load(filter, isCleanUp, function(err, data) {
            var page;
            _this.onLoadEnds(err, "index");
            if (pr) {
              page = isFiltering ? 1 : filter.$page;
              pr.setPaging({
                page: page,
                itemsPerPage: filter.$itemsPerPage,
                count: _this.viewModel.list().length,
                latestLoadCount: data.length
              });
            }
            if (onDone) {
              return onDone(err, _this.viewModel.list().length);
            }
          });
        } else {
          if (pr) {
            pr.setPaging({
              page: 1,
              itemsPerPage: filter.$itemsPerPage,
              count: this.viewModel.list().length,
              latestLoadCount: filter.$itemsPerPage
            });
          }
          if (onDone) {
            return onDone(null, 0);
          }
        }
      };

      ControllerBase.prototype.onLoadBegins = function(context, isFiltering) {
        this.stateZone().isLoading(true);
        return this.stateZone().isPageMove(!isFiltering);
      };

      ControllerBase.prototype.onLoadEnds = function(err, context) {
        this.stateZone().isLoading(false);
        this.stateZone().isPageMove(false);
        return this.stateZone().isEmptyResult(this.viewModel.list().length === 0);
      };

      ControllerBase.prototype.createIndexViewModel = function(type) {
        var fr, pr,
          _this = this;
        this.onCreateIndexViewModel(type);
        this.onCreateZones("index");
        fr = this.filterZone();
        pr = this.pagerZone();
        if (pr) {
          pr.onChanged(function(page) {
            return _this.onLoadIndex({
              $page: page
            }, false);
          });
        }
        if (fr) {
          return fr.onChanged(function() {
            _this.serialize("filter");
            return _this.onLoadIndex(null, true);
          });
        }
      };

      ControllerBase.prototype.onCreateIndexViewModel = function(type) {
        if (type == null) {
          type = this.modelName;
        }
        return this.viewModel = new indexVM.IndexVM(type);
      };

      ControllerBase.prototype.item = function(id, onDone) {
        var _this = this;
        if (!this.viewModel || _u.getClassName(this.viewModel) !== "ItemVM") {
          this.createItemViewModel();
        }
        return async.waterfall([
          function(ck) {
            return _this.viewModel.load(id, ck);
          }, function(item, ck) {
            return _this.view(_this.defaultItemBody, _this.defaultItemLayout, ck);
          }
        ], function(err) {
          if (onDone) {
            return onDone(err, _this.viewModel);
          }
        });
      };

      ControllerBase.prototype.createItemViewModel = function() {
        this.onCreateItemViewModel();
        return this.onCreateZones("item");
      };

      ControllerBase.prototype.onCreateItemViewModel = function() {
        return this.viewModel = new itemVM.ItemVM(this.modelName);
      };

      /* zones
      */


      ControllerBase.prototype.onCreateZones = function(context) {
        this.viewModel.zones = {};
        this.onCreateStateZone(context);
        this.onCreateToolboxZone(context);
        this.onCreateNavZone(context);
        if (context === "index") {
          this.onCreateFilterZone();
          return this.onCreatePagerZone();
        }
      };

      ControllerBase.prototype.onCreateToolboxZone = function() {};

      ControllerBase.prototype.onCreateFilterZone = function() {};

      ControllerBase.prototype.onCreateStateZone = function() {
        return this.viewModel.zones.state = new state.State();
      };

      ControllerBase.prototype.onCreateNavZone = function() {
        var nav;
        nav = this.nav();
        if (nav) {
          return ko.applyBindings({
            navBar: nav
          }, $("#_nav")[0]);
        }
      };

      ControllerBase.prototype.onCreatePagerZone = function() {};

      ControllerBase.prototype.toolboxZone = function() {
        if (this.viewModel.zones) {
          return this.viewModel.zones.toolbox;
        } else {
          return null;
        }
      };

      ControllerBase.prototype.filterZone = function() {
        if (this.toolboxZone() && this.toolboxZone().filter) {
          return this.toolboxZone().filter;
        } else if (this.viewModel.zones) {
          return this.viewModel.zones.filter;
        } else {
          return null;
        }
      };

      ControllerBase.prototype.pagerZone = function() {
        if (this.viewModel.zones) {
          return this.viewModel.zones.pager;
        } else {
          return null;
        }
      };

      ControllerBase.prototype.stateZone = function() {
        if (this.viewModel.zones) {
          return this.viewModel.zones.state;
        } else {
          return null;
        }
      };

      /* ^zones
      */


      ControllerBase.prototype.view = function(viewPath, layoutViewPath, onDone) {
        var bvp, crName, lvp,
          _this = this;
        crName = this._getControllerName();
        lvp = ControllerBase._prepareViewPath(crName, layoutViewPath, this.defaultItemLayout);
        bvp = ControllerBase._prepareViewPath(crName, viewPath);
        this.onViewStartsLoad();
        return this.loadView(crName, lvp, bvp, function(err) {
          if (!err) {
            ko.applyBindings(_this.root(), $("#_layout")[0]);
          }
          _this.onViewLoaded(err);
          if (onDone) {
            return onDone(err);
          }
        });
      };

      ControllerBase.prototype.onViewStartsLoad = function() {};

      ControllerBase.prototype.onViewEndsLoad = function(layoutHtml, bodyHtml, onDone) {
        if (onDone) {
          return onDone();
        }
      };

      ControllerBase.SwapLayout = function(layoutHtml, bodyHtml) {
        $("#_layout").empty();
        $("#_layout").append(layoutHtml);
        if (bodyHtml) {
          return $("#_body").append(bodyHtml);
        }
      };

      ControllerBase.prototype.onViewLoaded = function(err) {
        return this.setDefaultFocuses();
      };

      ControllerBase.prototype.setDefaultFocuses = function() {
        $("[data-default-input]").focus();
        if ($("[data-default-button]").length) {
          return $(document).bind("keyup", function(e) {
            if (e.keyCode === 13) {
              return $("[data-default-button]").click();
            }
          });
        }
      };

      ControllerBase.prototype.loadView = function(controllerName, layoutViewPath, bodyViewPath, onDone) {
        var _this = this;
        return ControllerBase.LoadView(controllerName, layoutViewPath, bodyViewPath, function(err) {
          _this.onViewLoaded(err);
          if (onDone) {
            return onDone(err);
          }
        });
      };

      ControllerBase.LoadView = function(controllerName, layoutViewPath, bodyViewPath, onDone) {
        return async.waterfall([
          function(ck) {
            return require(["Ural/text!" + layoutViewPath], function(layoutHtml) {
              return ck(null, layoutHtml);
            });
          }, function(layoutHtml, ck) {
            return ControllerBase._renderPartialViews(controllerName, layoutHtml, ck);
          }, function(layoutHtml, ck) {
            if (bodyViewPath) {
              return require(["Ural/text!" + bodyViewPath], function(bodyHtml) {
                return ck(null, layoutHtml, bodyHtml);
              });
            } else {
              return ck(null, layoutHtml, null);
            }
          }, function(layoutHtml, bodyHtml, ck) {
            if (bodyHtml) {
              return ControllerBase._renderPartialViews(controllerName, bodyHtml, function(err, renderedBody) {
                return ck(err, layoutHtml, renderedBody);
              });
            } else {
              return ck(null, layoutHtml, null);
            }
          }
        ], function(err, layoutHtml, bodyHtml) {
          ControllerBase.SwapLayout(layoutHtml, bodyHtml);
          if (onDone) {
            return onDone(err);
          }
        });
      };

      ControllerBase._renderPartialViews = function(controllerName, html, callback) {
        html = _u.wrapHtml(html);
        return ControllerBase.__renderPartialViews(controllerName, html, function(err, renderedHtml) {
          if (renderedHtml) {
            renderedHtml = $(renderedHtml).html();
          }
          return callback(err, renderedHtml);
        });
      };

      ControllerBase.__renderPartialViews = function(controllerName, html, callback) {
        var partialViews, paths, rawPaths;
        partialViews = $("[data-partial-view]", html);
        rawPaths = $.makeArray(partialViews.map(function(i, p) {
          return $(p).attr("data-partial-view");
        }));
        paths = rawPaths.map(function(p) {
          return "Ural/text!" + (ControllerBase._prepareViewPath(controllerName, p));
        });
        if (paths.length) {
          return require(paths, function() {
            var $h, $pratialViewTag, i, idx, jViewBag, partialHtml, partialHtmls, viewBag, viewsHash, _i, _len;
            partialHtmls = _u.argsToArray(arguments);
            viewsHash = [];
            for (i = _i = 0, _len = partialHtmls.length; _i < _len; i = ++_i) {
              partialHtml = partialHtmls[i];
              $h = $(html);
              idx = viewsHash[rawPaths[i]];
              if (idx == null) {
                idx = 0;
              }
              $pratialViewTag = $h.find("[data-partial-view='" + rawPaths[i] + "']:eq(" + idx + ")");
              viewsHash[rawPaths[i]] = idx + 1;
              viewBag = $pratialViewTag.attr("data-partial-view-bag");
              $pratialViewTag.removeAttr("data-partial-view");
              $pratialViewTag.removeAttr("data-partial-view-bag");
              jViewBag = viewBag ? eval("(" + viewBag + ")") : {};
              $.templates({
                pvt: partialHtml
              });
              partialHtml = $.render.pvt(jViewBag);
              $pratialViewTag.html(partialHtml);
              html = _u.wrapHtml($h.html());
            }
            return async.forEachSeries(partialHtmls, function(ph, ck) {
              return ControllerBase.__renderPartialViews(controllerName, html, function(err, renderedHtml) {
                html = renderedHtml;
                return ck(err);
              });
            }, function(err) {
              return callback(err, html);
            });
          });
        } else {
          return callback(null, html);
        }
      };

      ControllerBase._prepareViewPath = function(controllerName, path, defPath) {
        if (path && _.str.count(path, '/') >= 2) {
          if (!path.match(/^Views\/.*/ || _.str.count(path, '/') > 2)) {
            if (!path.match(/.*\.htm[l]?/)) {
              path += ".html";
            }
            return path;
          }
        }
        if (path == null) {
          path = defPath;
        }
        if (path) {
          if (!path.match(/.*\.htm[l]?/)) {
            path += ".html";
          }
          if (!path.match(/^Views\/.*/)) {
            if (!path.match(/.*\/.*/)) {
              return "Views/" + controllerName + "/" + path;
            } else {
              return "Views/" + path;
            }
          } else {
            return path;
          }
        }
      };

      ControllerBase.prototype._getControllerName = function() {
        return _u.getClassName(this).replace(/^(\w*)Controller$/, "$1");
      };

      ControllerBase.prototype.setRoute = function(route, silently) {
        return pubSub.pub("router", "set", {
          route: route,
          silently: silently
        });
      };

      /* serialize / deserialize
      */


      ControllerBase.prototype.getSerializationName = function() {
        return "controller." + this.modelName + "." + (_u.getClassName(this.viewModel) === "ItemVM" ? "item" : "index");
      };

      ControllerBase.prototype._store = function(name, obj) {
        var storeName;
        storeName = this.getSerializationName();
        name = "" + storeName + "." + name;
        return amplify.store(name, obj);
      };

      ControllerBase.prototype._restore = function(name) {
        var storeName;
        storeName = this.getSerializationName();
        name = "" + storeName + "." + name;
        return amplify.store(name);
      };

      ControllerBase.prototype.serialize = function(names) {
        var data, name, _i, _len, _results;
        if (names == null) {
          names = [];
        }
        if (!Array.isArray(names)) {
          names = [names];
        }
        _results = [];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          data = this.onSerialize(name);
          if (data) {
            _results.push(this._store(name, data));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      ControllerBase.prototype.getDefaultDeserializedNames = function() {
        return ["filter"];
      };

      ControllerBase.prototype.deserialize = function(names, onDone) {
        var name;
        if (names == null) {
          names = [];
        }
        if (!Array.isArray(names)) {
          names = [names];
        }
        return this._onDeserialize((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = names.length; _i < _len; _i++) {
            name = names[_i];
            _results.push(name);
          }
          return _results;
        })(), onDone);
      };

      ControllerBase.prototype._onDeserialize = function(names, onDone) {
        var _this = this;
        return async.forEach(names, (function(name, ck) {
          return _this.onDeserialize(name, _this._restore(name), ck);
        }), onDone);
      };

      ControllerBase.prototype.onSerialize = function(name) {
        if (name === "filter") {
          return this.filterZoneSerialize();
        }
      };

      ControllerBase.prototype.onDeserialize = function(name, data, onDone) {
        if (name === "filter") {
          return this.filterZoneDeserialize(data, onDone);
        }
      };

      ControllerBase.prototype.filterZoneSerialize = function() {
        var fr;
        fr = this.filterZone();
        if (fr && fr.serialize) {
          return fr.serialize();
        }
      };

      ControllerBase.prototype.filterZoneDeserialize = function(data, onDone) {
        var fr;
        fr = this.filterZone();
        if (data && fr && fr.deserialize) {
          return fr.deserialize(data, onDone);
        } else {
          return onDone();
        }
      };

      /* serialize / deserialize
      */


      /*Sockets
      */


      ControllerBase.prototype.setStreamSocket = function(channel, event) {
        var _this = this;
        return socket.get().sub(channel, event, function(data) {
          return _this.onStreamSocket(channel, event, data);
        });
      };

      ControllerBase.prototype.releaseStreamSocket = function(channel, event) {
        return socket.get().unsub(channel, event);
      };

      ControllerBase.prototype.onStreamSocket = function(channel, event, data) {
        console.log(data);
        if (event === "added") {
          return this.onIndexStreamSocket(data);
        }
      };

      ControllerBase.prototype.setIndexStreamSocket = function(channelName) {
        if (channelName == null) {
          channelName = "" + (this.modelName.toLowerCase()) + "_index";
        }
        return this.setStreamSocket(channelName, "added");
      };

      ControllerBase.prototype.releaseIndexStreamSocket = function(channelName) {
        if (channelName == null) {
          channelName = "" + (this.modelName.toLowerCase()) + "_index";
        }
        return this.releaseStreamSocket(channelName, "added");
      };

      ControllerBase.prototype.onIndexStreamSocket = function(data) {
        return this.viewModel.addNewItem(data);
      };

      /*Sockets
      */


      ControllerBase.prototype.root = function() {
        return this.viewModel;
      };

      ControllerBase.prototype.nav = function() {};

      return ControllerBase;

    })();
    return {
      ControllerBase: ControllerBase
    };
  });

}).call(this);
