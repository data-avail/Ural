// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["Ural/Controllers/controllerBootstrap", "Ural/Models/Zones/user", "Ural/Libs/jquery.cookie"], function(controllerBootstrap, user, cookie) {
    var ControllerAuth;
    ControllerAuth = (function(_super) {

      __extends(ControllerAuth, _super);

      function ControllerAuth(type, opts) {
        ControllerAuth.__super__.constructor.call(this, type, opts);
        this._initialLoad = true;
      }

      ControllerAuth.prototype.onAction = function(data, onDone) {
        ControllerAuth.__super__.onAction.call(this, data, function() {});
        if (!data.begins && this._initialLoad) {
          this._initialLoad = false;
          return this.onLoadUserStuff(onDone);
        } else {
          if (onDone) {
            return onDone();
          }
        }
      };

      ControllerAuth.prototype.onLoadUserStuff = function(onDone) {
        if (onDone) {
          return onDone(null);
        }
      };

      ControllerAuth.prototype.getAuthReturnRoute = function() {
        return window.location.hash;
      };

      ControllerAuth.prototype.getAuthLogOff = function() {
        return "/Account/OAuthLogOff";
      };

      ControllerAuth.prototype._loginPopup = function(returnRoute, returnExec) {
        var returnUrl;
        returnUrl = "#" + returnRoute + "/!/user/$user";
        if (returnExec) {
          returnUrl += "/!/" + returnExec;
        }
        returnUrl = escape(returnUrl);
        return _u.popup("/Account/OAuth?serviceName=Twitter&extWindow=true&returnUrl=" + returnUrl, 600, 400);
      };

      ControllerAuth.prototype.auth = function(returnRoute, returnExec) {
        if (!this.user()) {
          if (returnRoute == null) {
            returnRoute = this.getAuthReturnRoute();
          }
          this._loginPopup(returnRoute, returnExec);
          return false;
        } else {
          return true;
        }
      };

      ControllerAuth.prototype.logOff = function(onDone) {
        var _this = this;
        return $.get(this.getAuthLogOff(), function() {
          return _this.user(null);
        });
      };

      ControllerAuth.prototype.user = function(userName) {
        if (userName === void 0) {
          return this.userZone().name();
        } else {
          if (this.user() !== userName) {
            this.userZone().name(userName);
            return this.onLoadUserStuff(function() {});
          }
        }
      };

      ControllerAuth.prototype.createUserZone = function() {
        this.viewModel.zones.user = new user.User(this);
        return this.viewModel.zones.user.name($.cookie(".ASPXAUTH_USER"));
      };

      ControllerAuth.prototype.userZone = function() {
        return this.viewModel.zones.user;
      };

      ControllerAuth.prototype.createIndexViewModel = function(filter) {
        ControllerAuth.__super__.createIndexViewModel.call(this, filter);
        return this.createUserZone();
      };

      ControllerAuth.prototype.createItemViewModel = function() {
        ControllerAuth.__super__.createItemViewModel.call(this);
        return this.createUserZone();
      };

      return ControllerAuth;

    })(controllerBootstrap.ControllerBootstrap);
    return {
      ControllerAuth: ControllerAuth
    };
  });

}).call(this);
